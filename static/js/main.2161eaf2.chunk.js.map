{"version":3,"sources":["redux/rootReducer/constants.js","redux/rootReducer/reducer.js","redux/weatherReducer/constants.js","redux/weatherReducer/reducer.js","redux/store.js","serviceWorker.js","services/CityService.js","components/SearchBar/SearchBar.jsx","components/WeatherIcons/WeatherIcons.jsx","components/CSSTransition/CSSTransition.jsx","components/RecentlyViewed/RecentlyViewed.jsx","pages/Home/Home.jsx","redux/weatherReducer/actions.js","components/Loader/Loader.jsx","services/WeatherService.js","helpers/dateFormat.js","components/CurrentWeather/CurrentWeather.jsx","components/ComingWeather/ComingWeather.jsx","pages/CityWeather/CityWeather.jsx","pages/Settings/Settings.jsx","redux/rootReducer/actions.js","routes/Routes.jsx","components/Navigation/Navigation.jsx","components/Header/Header.jsx","App.jsx","index.js"],"names":["CHANGE_API_KEY","CHANGE_TEMPERATURE_UNIT","initialState","apiKey","localStorage","getItem","temperatureUnit","rootReducer","state","action","type","t","setItem","payload","WEATHER_IS_LOADING","SET_CURRENT_WEATHER","SET_COMING_WEATHER","WEATHER_FETCH_DATA_FAIL","CLEAR_CURRENT_WEATHER","currentWeather","comingWeather","recentWeathers","weatherIsLoading","responseErrorMessage","weatherReducer","concat","filter","item","name","list","Date","dt","getHours","store","createStore","combineReducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","CityService","city","fetch","then","response","ok","json","catch","error","console","log","Option","Select","SearchBar","history","useHistory","useSelector","useState","loading","setLoading","searchResults","setSearchResults","placeholder","className","size","showSearch","showArrow","onSearch","searchCitiesByName","cities","finally","onChange","cityName","split","push","toLowerCase","map","index","key","value","message","description","showIcon","WeatherIcons","props","CSSTransition","show","duration","children","render","setRender","useEffect","style","animation","onAnimationEnd","RecentlyViewedItem","weather","to","sys","country","main","temp","toFixed","RecentlyViewed","lastFiveCityWeather","slice","length","Home","isLoading","setCurrentWeather","currentWeatherFetchData","url","dispatch","cod","toString","weatherFetchDataFail","comingWeatherFetchData","setComingWeather","Loader","WeatherService","getState","this","_getApiKey","unit","_getTemperatureUnit","dateFormat","timestamp","date","day_index","getDay","time","toLocaleString","hour","minute","hour12","CurrentWeather","useDispatch","recentWeather","find","getCurrentWeatherData","gutter","span","wind","speed","pressure","humidity","clouds","all","ComingWeatherItem","ComingWeather","getComingWeatherData","CityWeather","params","id","Settings","onApiKeyChange","defaultValue","e","target","tempUnit","Routes","exact","path","component","Navigation","shape","icon","Header","Layout","HeaderComponent","justify","align","Content","App","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2161eaf2.chunk.js","sourcesContent":["export const CHANGE_API_KEY = 'CHANGE_API_KEY';\nexport const CHANGE_TEMPERATURE_UNIT = 'CHANGE_TEMPERATURE_UNIT';\n","import * as t from './constants';\n\nconst initialState = {\n  apiKey: localStorage.getItem('apiKey') || '',\n  temperatureUnit: 'celsius',\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case t.CHANGE_API_KEY:\n      localStorage.setItem('apiKey', action.payload)\n      return {\n        ...state,\n        apiKey: action.payload\n      };\n    case t.CHANGE_TEMPERATURE_UNIT:\n      return {\n        ...state,\n        temperatureUnit: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","export const WEATHER_IS_LOADING = 'WEATHER_IS_LOADING';\nexport const SET_CURRENT_WEATHER = 'SET_CURRENT_WEATHER';\nexport const SET_COMING_WEATHER = 'SET_COMING_WEATHER';\nexport const WEATHER_FETCH_DATA_FAIL = 'WEATHER_FETCH_DATA_FAIL';\nexport const CLEAR_CURRENT_WEATHER = 'CLEAR_CURRENT_WEATHER';\n","import * as t from './constants';\n\nconst initialState = {\n  currentWeather: null,\n  comingWeather: [],\n  recentWeathers: [],\n  weatherIsLoading: false,\n  responseErrorMessage: '',\n};\n\nconst weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case t.CLEAR_CURRENT_WEATHER:\n      return {\n        ...state,\n        currentWeather: null,\n        responseErrorMessage: '',\n      };\n    case t.WEATHER_IS_LOADING:\n      return {\n        ...state,\n        weatherIsLoading: action.payload\n      };\n    case t.SET_CURRENT_WEATHER:\n      return {\n        ...state,\n        currentWeather: action.payload,\n        recentWeathers: [].concat(\n          action.payload,\n          state.recentWeathers.filter(item => item.name !== action.payload.name)\n        )\n      };\n    case t.SET_COMING_WEATHER:\n      const comingWeather = action.payload.list.filter(item => {\n        const date = new Date(item.dt * 1000);\n        return date.getHours() === 12\n      });\n      return {\n        ...state,\n        comingWeather\n      };\n    case t.WEATHER_FETCH_DATA_FAIL:\n      return {\n        ...state,\n        responseErrorMessage: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer/reducer';\nimport weatherReducer from './weatherReducer/reducer';\n\nexport const store = createStore(\n  combineReducers({\n    rootReducer,\n    weatherReducer,\n  }),\n  applyMiddleware(thunk)\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const API_URL  = 'https://cors-anywhere.herokuapp.com/http://gd.geobytes.com'; // for github page\n\nclass CityService {\n  static searchCitiesByName(city) {\n    return fetch(`${API_URL}/AutoCompleteCity?q=${city}`)\n      .then(response => {\n        if (!response.ok) throw response;\n        return response.json();\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n}\n\nexport default CityService;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Alert, Select } from 'antd';\nimport CityService from '../../services/CityService';\nimport './SearchBar.scss';\n\nconst { Option } = Select;\n\nconst SearchBar = () => {\n  const history = useHistory();\n  const { apiKey } = useSelector(state => state.rootReducer);\n  const [loading, setLoading] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const onSearch = city => {\n    if (!city) return null;\n    setLoading(true);\n    CityService.searchCitiesByName(city)\n      .then(cities => {\n        if (cities[0] !== '%s' && cities[0] !== '') setSearchResults(cities);\n        else setSearchResults([])\n      })\n      .finally(() => setLoading(false) );\n  }\n  \n  const onChange = city => {\n    const cityName = city.split(',')[0];\n    history.push(`/w/${cityName.toLowerCase()}`);\n  }\n\n  if (!apiKey) {\n    return (\n      <Alert\n        message='Error'\n        description='No API key found, please go to the settings page and add one.'\n        type='error'\n        showIcon\n      />\n    )\n  }\n\n  return (\n    <Select\n      placeholder='Enter city name'\n      className='SearchBar'\n      size='large'\n      showSearch\n      showArrow={false}\n      loading={loading}\n      onSearch={onSearch}\n      onChange={onChange}\n    >\n      {searchResults.map((city, index) => (\n        <Option key={index} value={city}>\n          {city}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './WeatherIcons.scss';\n\nconst WeatherIcons = (props) => {\n  switch (props.name) {\n    case 'Drizzle':\n      return (\n        <div className=\"WeatherIcon drizzle\">\n          <div className=\"cloud\"/>\n          <div className=\"sun\">\n            <div className=\"rays\"/>\n          </div>\n          <div className=\"rain\"/>\n        </div>\n      );\n    case 'Thunderstorm':\n      return (\n        <div className=\"WeatherIcon thunderstorm\">\n          <div className=\"cloud\"/>\n          <div className=\"lightning\">\n            <div className=\"bolt\"/>\n            <div className=\"bolt\"/>\n          </div>\n        </div>\n      );\n    case 'Clouds':\n      return (\n        <div className=\"WeatherIcon clouds\">\n          <div className=\"cloud\"/>\n          <div className=\"cloud\"/>\n        </div>\n      );\n    case 'Snow':\n      return (\n        <div className=\"WeatherIcon flurries\">\n          <div className=\"cloud\"/>\n          <div className=\"snow\">\n            <div className=\"flake\"/>\n            <div className=\"flake\"/>\n          </div>\n        </div>\n      );\n    case 'Clear':\n      return (\n        <div className=\"WeatherIcon clear\">\n          <div className=\"sun\">\n            <div className=\"rays\"/>\n          </div>\n        </div>\n      );\n    case 'Rain':\n      return (\n        <div className=\"WeatherIcon rain\">\n          <div className=\"cloud\"/>\n          <div className=\"rain\"/>\n        </div>\n      );\n    default:\n      return null;\n  }\n};\n\nexport default WeatherIcons;\n","import React, { useEffect, useState } from 'react';\nimport './CSSTransition.scss';\n\nconst CSSTransition = ({ type, show, duration = 800, children }) => {\n  const [render, setRender] = useState(show);\n\n  useEffect(() => {\n    if (show) setRender(true);\n  }, [show]);\n\n  const onAnimationEnd = () => {\n    if (!show) setRender(false);\n  };\n\n  return (\n    render && (\n      <div\n        style={{ animation: `${show ? `${type}In` : `${type}Out`} ${duration}ms` }}\n        onAnimationEnd={onAnimationEnd}\n      >\n        {children}\n      </div>\n    )\n  );\n};\n\nexport default CSSTransition;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport WeatherIcons from '../WeatherIcons/WeatherIcons';\nimport CSSTransition from '../CSSTransition/CSSTransition';\nimport './RecentlyViewed.scss';\n\nconst RecentlyViewedItem = ({ weather }) => (\n  <li className='RecentlyViewed__item'>\n    <NavLink to={`/w/${weather.name.toLowerCase()}`}>\n      <h2 className='RecentlyViewed__item-title'>\n        {weather.name}, {weather.sys.country}\n      </h2>\n      <h3 className='RecentlyViewed__item-temp'>\n        {weather.main.temp.toFixed(0)}\n        &deg;\n      </h3>\n      <WeatherIcons name={weather.weather[0].main}/>\n      <h3 className='RecentlyViewed__item-desc'>\n        {weather.weather[0].description}\n      </h3>\n    </NavLink>\n  </li>\n);\n\nconst RecentlyViewed = ({ recentWeathers }) => {\n  const lastFiveCityWeather = recentWeathers.slice(0, 5);\n\n  return (\n    <CSSTransition type='fade' show={lastFiveCityWeather.length !== 0} duration={600}>\n      <section className='RecentlyViewed'>\n        <ul className='RecentlyViewed__list'>\n          {lastFiveCityWeather.map((weather, index) => (\n            <RecentlyViewedItem key={index} weather={weather}/>\n          ))}\n        </ul>\n      </section>\n    </CSSTransition>\n  );\n};\n\nexport default RecentlyViewed;\n","import React from 'react';\nimport SearchBar from '../../components/SearchBar/SearchBar'\nimport RecentlyViewed from '../../components/RecentlyViewed/RecentlyViewed'\nimport './Home.scss';\nimport { useSelector } from \"react-redux\";\n\nconst Home = () => {\n  const { recentWeathers } = useSelector(state => state.weatherReducer);\n\n  return (\n    <div className='Home'>\n      <div className='Home__container'>\n        <h1 className='Home__title'>\n          Search the weather forecast\n        </h1>\n        <SearchBar />\n      </div>\n      {recentWeathers.length !== 0 && (\n        <div className='Home__container'>\n          <h1 className='Home__title'>\n            Recently viewed\n          </h1>\n          <RecentlyViewed recentWeathers={recentWeathers}/>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import * as t from './constants';\n\nexport function clearCurrentWeather(error) {\n  return {\n    type: t.CLEAR_CURRENT_WEATHER,\n    payload: error\n  };\n}\n\nexport function weatherFetchDataFail(error) {\n  return {\n    type: t.WEATHER_FETCH_DATA_FAIL,\n    payload: error\n  };\n}\n\nexport function weatherIsLoading(isLoading) {\n  return {\n    type: t.WEATHER_IS_LOADING,\n    payload: isLoading\n  };\n}\n\nexport function setCurrentWeather(response) {\n  return {\n    type: t.SET_CURRENT_WEATHER,\n    payload: response\n  };\n}\n\nexport function setComingWeather(response) {\n  return {\n    type: t.SET_COMING_WEATHER,\n    payload: response\n  };\n}\n\nexport function currentWeatherFetchData(url) {\n  return dispatch => {\n    dispatch(weatherIsLoading(true));\n    return fetch(url)\n    .then(response => response.json())\n    .then(response => {\n      if (response.cod.toString() === '200') return response;\n      else throw response.message;\n    })\n    .then(response => dispatch(setCurrentWeather(response)))\n    .catch(error => dispatch(weatherFetchDataFail(error)))\n    .finally(() => dispatch(weatherIsLoading(false)))\n  }\n}\n\nexport function comingWeatherFetchData(url) {\n  return dispatch => {\n    return fetch(url)\n    .then(response => response.json())\n    .then(response => {\n      if (response.cod.toString() === '200') return response;\n      else throw response.message;\n    })\n    .then(response => dispatch(setComingWeather(response)))\n    .catch(error => console.log('Error', error))\n  }\n}\n","import React from 'react';\nimport WeatherIcons from '../../components/WeatherIcons/WeatherIcons';\nimport './Loader.scss';\n\nconst Loader = () => (\n  <div className='Loader'>\n    <WeatherIcons name='Clear'/>\n  </div>\n);\n\nexport default Loader;\n","import store from '../redux/store'\nimport { currentWeatherFetchData, comingWeatherFetchData } from '../redux/weatherReducer/actions'\n\nconst API_URL  = 'https://api.openweathermap.org';\n\nclass WeatherService {\n  static apiKey = store.getState().rootReducer.apiKey;\n\n  static _getApiKey() {\n    return store.getState().rootReducer.apiKey;\n  }\n\n  static _getTemperatureUnit() {\n    const { temperatureUnit } = store.getState().rootReducer;\n    return temperatureUnit === 'celsius' ? 'metric' : 'imperial';\n  }\n\n  static getCurrentWeatherData(city) {\n    if (!city) return;\n    const apiKey = this._getApiKey();\n    const unit = this._getTemperatureUnit();\n    const url = `${API_URL}/data/2.5/weather?q=${city}&units=${unit}&APPID=${apiKey}`;\n    return store.dispatch(currentWeatherFetchData(url))\n  }\n\n  static getComingWeatherData(city) {\n    if (!city) return;\n    const apiKey = this._getApiKey();\n    const unit = this._getTemperatureUnit();\n    const url = `${API_URL}/data/2.5/forecast?q=${city}&units=${unit}&APPID=${apiKey}`;\n    return store.dispatch(comingWeatherFetchData(url))\n  }\n}\n\nexport default WeatherService;\n","function dateFormat (timestamp) {\n  const date = new Date(timestamp * 1000);\n  if (!date) return undefined;\n\n  const day_names = ['Sunday', 'Monday', 'Thursday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const day_index = date.getDay();\n  const time = date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n\n  return `${day_names[day_index]} ${time}`;\n}\n\nexport default dateFormat;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCurrentWeather } from \"../../redux/weatherReducer/actions\";\nimport WeatherService from '../../services/WeatherService';\nimport dateFormat from '../../helpers/dateFormat';\nimport { Row, Col } from \"antd\";\nimport { Alert } from 'antd';\nimport WeatherIcons from '../WeatherIcons/WeatherIcons';\nimport CSSTransition from '../CSSTransition/CSSTransition';\nimport './CurrentWeather.scss';\n\nconst CurrentWeather = (props) => {\n  const {\n    currentWeather,\n    recentWeathers,\n    responseErrorMessage\n  } = useSelector(state => state.weatherReducer);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const recentWeather = recentWeathers.find(item => item.name.toLowerCase() === props.cityName);\n    if (!!recentWeather) dispatch(setCurrentWeather(recentWeather));\n    else WeatherService.getCurrentWeatherData(props.cityName);\n  }, []);\n\n  if (responseErrorMessage) {\n    return (\n      <Alert\n        message='Error'\n        description={responseErrorMessage}\n        type='error'\n        showIcon\n      />\n    )\n  }\n\n  if (!currentWeather) return null;\n\n  return (\n    <CSSTransition type='fade' show={currentWeather}>\n      <section className='CurrentWeather'>\n        <h1 className=\"CurrentWeather__title\">\n          {currentWeather.name}, {currentWeather.sys.country}\n        </h1>\n        <h2 className='CurrentWeather__temp'>\n          {currentWeather.main.temp.toFixed(0)}\n          &deg;\n        </h2>\n        <WeatherIcons name={currentWeather.weather[0].main}/>\n        <h2 className='CurrentWeather__desc'>\n          {currentWeather.weather[0].description}\n        </h2>\n        <h3 className='CurrentWeather__date'>\n          {dateFormat(currentWeather.dt)}\n        </h3>\n        <Row className='CurrentWeather__row' gutter={[12, 12]}>\n          <Col span={12}>\n            Wind: {currentWeather.wind.speed} m/s\n          </Col>\n          <Col span={12}>\n            Pressure: {currentWeather.main.pressure} hPa\n          </Col>\n        </Row>\n        <Row className='CurrentWeather__row' gutter={[12, 12]}>\n          <Col span={12}>\n            Humidity: {currentWeather.main.humidity} %\n          </Col>\n          <Col span={12}>\n            Cloudiness {currentWeather.clouds.all} %\n          </Col>\n        </Row>\n      </section>\n    </CSSTransition>\n  )\n};\n\nexport default CurrentWeather;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport WeatherService from '../../services/WeatherService';\nimport dateFormat from '../../helpers/dateFormat';\nimport WeatherIcons from '../WeatherIcons/WeatherIcons';\nimport CSSTransition from '../CSSTransition/CSSTransition';\nimport './ComingWeather.scss';\n\nconst ComingWeatherItem = ({ weather }) => (\n  <li className='ComingWeather__item'>\n    <h2 className='ComingWeather__item-title'>\n      {dateFormat(weather.dt)}\n    </h2>\n    <h3 className='ComingWeather__item-temp'>\n      {weather.main.temp.toFixed(0)}\n      &deg;\n    </h3>\n    <WeatherIcons name={weather.weather[0].main}/>\n    <h3 className='ComingWeather__item-desc'>\n      {weather.weather[0].description}\n    </h3>\n  </li>\n);\n\nconst ComingWeather = (props) => {\n  const {\n    comingWeather,\n    weatherIsLoading,\n    responseErrorMessage\n  } = useSelector(state => state.weatherReducer);\n\n  useEffect(() => {\n    WeatherService.getComingWeatherData(props.cityName);\n  }, [props.cityName]);\n\n  if (weatherIsLoading) return null;\n\n  return (\n    <CSSTransition type='fade' show={comingWeather.length !== 0 && !responseErrorMessage}>\n      <section className='ComingWeather'>\n        <ul className='ComingWeather__list'>\n          {comingWeather.map((weather, index) => (\n            <ComingWeatherItem key={index} weather={weather}/>\n          ))}\n        </ul>\n      </section>\n    </CSSTransition>\n  );\n};\n\nexport default ComingWeather;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearCurrentWeather } from \"../../redux/weatherReducer/actions\";\nimport Loader from '../../components/Loader/Loader';\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\nimport ComingWeather from '../../components/ComingWeather/ComingWeather';\n\nconst CityWeather = (props) => {\n  const { weatherIsLoading } = useSelector(state => state.weatherReducer);\n  const dispatch = useDispatch();\n\n  const cityName = props.match.params.id;\n\n  useEffect(() => {\n    return () => dispatch(clearCurrentWeather())\n  }, [dispatch]);\n\n  return (\n    <section className='CityWeather'>\n      {weatherIsLoading && <Loader/>}\n      <CurrentWeather cityName={cityName} />\n      <ComingWeather cityName={cityName} />\n    </section>\n  );\n};\n\nexport default CityWeather;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeApiKey, changeTemperatureUnit } from '../../redux/rootReducer/actions';\nimport { Select, Input } from 'antd';\nimport './Settings.scss';\n\nconst { Option } = Select;\n\nconst Settings = () => {\n  const { temperatureUnit, apiKey } = useSelector(state => state.rootReducer);\n  const dispatch = useDispatch();\n\n  const onApiKeyChange = key => {\n    dispatch(changeApiKey(key))\n  }\n\n  const onTempChange = tempUnit => {\n    dispatch(changeTemperatureUnit(tempUnit))\n  }\n\n  return (\n    <section className='Settings'>\n      <h1 className='Settings__header'>\n        Settings\n      </h1>\n      <div className='Settings__content'>\n        <div className=\"Settings__input-wrapper\">\n          <h2 className=\"Settings__input-title\">\n            API Key (Open Weather Map)\n          </h2>\n          <Input\n            defaultValue={apiKey}\n            placeholder='Enter API Key'\n            className='Settings__input'\n            size='large'\n            onChange={e => onApiKeyChange(e.target.value)}\n          />\n        </div>\n        <div\n        >\n          <h2 className='Settings__input-title'>\n            Temperature Unit\n          </h2>\n          <Select\n            value={temperatureUnit}\n            className='Settings__input'\n            size='large'\n            showArrow={false}\n            onChange={onTempChange}\n          >\n            <Option value='celsius'>\n              Celsius\n            </Option>\n            <Option value='fahrenheit'>\n              Fahrenheit\n            </Option>\n          </Select>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Settings;\n","import * as t from './constants';\n\nexport function changeApiKey(error) {\n  return {\n    type: t.CHANGE_API_KEY,\n    payload: error\n  };\n}\n\nexport function changeTemperatureUnit(error) {\n  return {\n    type: t.CHANGE_TEMPERATURE_UNIT,\n    payload: error\n  };\n}\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Home from '../pages/Home/Home';\nimport CityWeather from '../pages/CityWeather/CityWeather';\nimport Settings from '../pages/Settings/Settings';\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route exact path=\"/settings\" component={Settings} />\n    <Route exact path=\"/w/:id\" component={CityWeather} />\n    <Redirect to=\"/\" />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navigation.scss';\n\nimport { Button } from 'antd';\n\nconst Navigation = () => (\n  <nav className='Navigation'>\n    <NavLink to='/'>\n      <Button type='primary' shape='circle' icon='home' size='large' className='Navigation__button'/>\n    </NavLink>\n    <NavLink to='/settings'>\n      <Button type='primary' shape='circle' icon='setting' size='large' className='Navigation__button'/>\n    </NavLink>\n  </nav>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\nimport { Icon } from 'antd';\nimport Navigation from '../Navigation/Navigation';\nimport './Header.scss';\n\nconst { Header } = Layout;\n\nconst HeaderComponent = () => (\n  <Header className='Header'>\n    <Row type='flex' justify='space-between' align='middle'>\n      <Col>\n        <Row type='flex' justify='space-between' align='middle'>\n          <Icon type='cloud' className='Header__icon' />\n          <h2 className='Header__title'>\n            Weather Forecast\n          </h2>\n        </Row>\n      </Col>\n      <Col>\n        <Navigation />\n      </Col>\n    </Row>\n  </Header>\n);\n\nexport default HeaderComponent;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Routes from './routes/Routes';\nimport HeaderComponent from \"./components/Header/Header\";\nimport { Layout } from 'antd';\nimport './scss/index.scss';\nimport 'antd/dist/antd.min.css';\n\nconst { Content } = Layout;\n\nconst App = () => (\n  <Layout className=\"main\">\n    <Router basename={process.env.PUBLIC_URL + \"/\"}>\n      <HeaderComponent />\n      <Content className=\"main__content\">\n        <Routes />\n      </Content>\n    </Router>\n  </Layout>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}